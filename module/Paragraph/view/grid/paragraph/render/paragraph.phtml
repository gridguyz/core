<?php

use Zork\Iterator\DepthList;
use Grid\Paragraph\Model\Paragraph\Structure\Layout;
use Grid\Paragraph\Model\Paragraph\StructureInterface;
use Grid\Paragraph\Model\Paragraph\Structure\ReferencedParagraphInterface;

$view = $this;
$list = new DepthList( $this->paragraphRenderList );

$this->headLink()
     ->appendStylesheet( '/styles/paragraph.css' );

if ( empty( $this->content ) )
{
    $rootContent = null;
}
else
{
    $root           = $this->viewModel()->getRoot();
    $rootContent    = $root->content;
    $root->content  = $this->content;
}

$list->runin( function ( $paragraph ) use ( $view ) {

    if ( $paragraph->id && $paragraph->id == $paragraph->rootId )
    {
        $view->customCss( $paragraph->id );
    }

?>

<<?= $paragraph::CONTAINER_TAG ?>
        class="paragraph-container paragraph-<?= $paragraph->type ?>-container"
        id="paragraph-<?= $paragraph->id ?>-container"
        data-paragraph-id="<?= $paragraph->id ?>"
        data-paragraph-type="<?= $paragraph->type ?>"
        data-paragraph-name="<?= $view->escapeHtml( $paragraph->nameLabel ) ?>"
        data-paragraph-properties="<?= implode( ' ', $paragraph::getAllowedFunctions() ) ?>"
        data-paragraph-only-child-of="<?= $paragraph::onlyChildOf() ?>"
        data-paragraph-only-parent-of="<?= $paragraph::onlyParentOf() ?>">
    <<?= $paragraph::PARAGRAPH_TAG ?>
<?php foreach ( (array) $paragraph->getAdditionalAttributes() as $attr => $value ): ?>

            <?= $attr ?>="<?= $view->escapeHtmlAttr( $value ) ?>"
<?php endforeach ?>

            id="paragraph-<?= $paragraph->id ?>"
            class="paragraph paragraph-<?= $paragraph->type ?>">
        <<?= $paragraph::CONTENT_OPEN_TAG ?>
            class="paragraph-content paragraph-content-open paragraph-<?= $paragraph->type ?>-content"
            ><?= $paragraph->renderOpen( $view ) ?></<?= $paragraph::CONTENT_OPEN_TAG ?>>
        <<?= $paragraph::CHILDREN_TAG ?>
            class="paragraph-children paragraph-<?= $paragraph->type ?>-children">
<?php if ( $paragraph instanceof ReferencedParagraphInterface )
{
    $referencedRenderList = $paragraph->getReferencedRenderList();

    if ( ! empty( $referencedRenderList ) )
    {
        echo $view->partial( 'grid/paragraph/render/paragraph', array(
            'paragraphRenderList' => (array) $referencedRenderList,
        ) );
    }
}

}, function ( $paragraph ) use ( $view ) { ?>

        </<?= $paragraph::CHILDREN_TAG ?>>
        <<?= $paragraph::CONTENT_CLOSE_TAG ?>
            class="paragraph-content paragraph-content-close paragraph-<?= $paragraph->type ?>-content"
            ><?= $paragraph->renderClose( $view ) ?></<?= $paragraph::CONTENT_CLOSE_TAG ?>>
    </<?= $paragraph::PARAGRAPH_TAG ?>>
</<?= $paragraph::CONTAINER_TAG ?>>

<?php if ( $paragraph instanceof Layout &&
           isset( $view->adminMenuSettings ) &&
           $view->isAllowed( 'admin', 'ui' ) ):
           $settings = $view->adminMenuSettings;
           $content = $paragraph->getRenderedContent(); ?>

<div data-js-type="js.admin.menu"
     data-js-adminmenu-state="<?= $settings->getSetting( 'open', true ) ? 'open' : 'closed' ?>"
     data-js-adminmenu-position="<?= $settings->getSetting( 'position', 'left' ) ?>"
     data-js-adminmenu-editmode="<?= $settings->getSetting( 'editMode', 'none' ) ?>"
     title="<?= $this->translate( 'admin.menu.title',
                                  'admin', $view->userLocale() ) ?>">
    <ul class="ui-helper-hidden">
        <li><a class="dashboard"
               href="/app/<?= $view->userLocale();
               ?>/admin/dashboard?adminLocale=<?= $view->locale(); ?>">
            <?= $view->translate( 'admin.menu.dashboard',
                                  'admin', $view->userLocale() ) ?>
        </a></li>
<?php if ( $view->isAllowed( 'uploads', 'manage' ) ): ?>

        <li><a class="file-manager" href="#">
            <?= $view->translate( 'admin.menu.fileManager',
                                  'admin', $this->userLocale() ) ?>
        </a></li>
<?php endif ?>
<?php if ( $content instanceof StructureInterface &&
           $content->isEditable() ): ?>

        <li><a class="edit-content" href="#">
            <?= $view->translate( 'admin.menu.editContent',
                                  'admin', $view->userLocale() ) ?>
        </a></li>
        <li><a class="edit-content-paragraph" href="#">
            <?= $view->translate( 'admin.menu.editContentParagraph',
                                  'admin', $view->userLocale() ) ?>
        </a></li>
<?php endif ?>
<?php if ( $view->isAllowed( 'paragraph', 'create' ) || $paragraph->isEditable() ||
           ( $content instanceof StructureInterface && $content->isEditable() ) ): ?>

        <li><a class="new-paragraph" href="#">
            <?= $view->translate( 'admin.menu.newParagraph',
                                  'admin', $view->userLocale() ) ?>
        </a></li>
<?php endif ?>
<?php if ( $view->isAllowed( 'paragraph.content', 'create' ) ): ?>

        <li><a class="new-content" href="#">
            <?= $view->translate( 'admin.menu.newContent',
                                  'admin', $view->userLocale() ) ?>
        </a></li>
<?php endif ?>
<?php if ( $paragraph->isEditable() ): ?>

        <li><a class="edit-layout" href="#">
            <?= $view->translate( 'admin.menu.editLayout',
                                  'admin', $view->userLocale() ) ?>
        </a></li>
<?php endif ?>
<?php if ( $content instanceof StructureInterface &&
           $view->isAllowed( 'paragraph.layout', 'create' ) &&
           ( $content->isEditable() ||
             $view->isAllowed( 'paragraph.content', 'changeLayout' ) ) ): ?>

        <li><a class="change-layout" href="#">
            <?= $view->translate( 'admin.menu.changeLayout',
                                  'admin', $view->userLocale() ) ?>
        </a></li>
<?php endif ?>
    </ul>
</div>

<?php endif ?>

<?php } );

$this->customCss()
     ->useGlobal();

if ( ! empty( $rootContent ) )
{
    $root->content = $rootContent;
}
